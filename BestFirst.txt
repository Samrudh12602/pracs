import heapq

class Graph:
    def __init__(self):
        self.graph = {}

    def add_edge(self, node, neighbor, weight):
        if node not in self.graph:
            self.graph[node] = []
        self.graph[node].append((neighbor, weight))

    def best_first_search(self, start, goal, heuristic):
        priority_queue = [(heuristic[start], start)]
        visited = set()

        while priority_queue:
            current_heuristic, current_node = heapq.heappop(priority_queue)

            if current_node in visited:
                continue

            visited.add(current_node)

            if current_node == goal:
                return True  # Path to the goal is found

            for neighbor, weight in self.graph.get(current_node, []):
                if neighbor not in visited:
                    heapq.heappush(priority_queue, (heuristic[neighbor], neighbor))

        return False  # No path to the goal is found

# Example usage:
if __name__ == "__main__":
    graph = Graph()
    graph.add_edge('A', 'B', 4)
    graph.add_edge('A', 'C', 8)
    graph.add_edge('B', 'C', 1)
    graph.add_edge('B', 'D', 3)
    graph.add_edge('C', 'D', 7)
    graph.add_edge('D', 'E', 2)
    graph.add_edge('E', 'A', 3)

    heuristic_values = {'A': 7, 'B': 2, 'C': 1, 'D': 5, 'E': 0}
    start_node = 'A'
    goal_node = 'E'

    if graph.best_first_search(start_node, goal_node, heuristic_values):
        print("Path to the goal exists.")
    else:
        print("No path to the goal.")
